#!/bin/bash

EXIT_STATUS=0
ERROR_UNKNOWN=10
ERROR_PROGRAM=2

OPTIONS=

[[ "${0::2}" = ./ ]] && acfs=./acfs || acfs=acfs

version() {
	$acfs --version
	exit $EXIT_STATUS
}

usage() {
	echo "usage: $0 [options] <ignored-value> <mountpoint>"
	$acfs --help
	exit $EXIT_STATUS
}

parse_args() {
	OPT=$(getopt -o u:,o:,h,V \
		--long usage-limit:,help,version -n "$0" -- "$@")
	if [ $? != 0 ]; then exit $ERROR_PROGRAM; fi
	NB_ARG="" # enabled if many args set in one parameter (i.e. -dris)
	eval set -- "$OPT"
	while :; do case "$1" in
		-o) FUSE_OPTIONS="$2"; shift; shift;;
		-u|--usage-limit) USAGE_LIMIT="$2"; shift; shift;;
		-V|--version) version; shift;;
		-h|--help) usage;;
		--) shift; break;;
		*) EXIT_STATUS=$ERROR_USER
			printf "\n!Unknown option: '%s'\n\n" "$1" >&2;
			usage;;
	esac; done
	if [[ $# -ne 2 ]]; then
		echo "invalid options"
		EXIT_STATUS=$ERROR_USER
		usage
	fi
	MOUNTPOINT=$2
}

parse_args $@


if [ "x$FUSE_OPTIONS" != "x" ]; then
	NORMALIZE_FUSE_OPTIONS=""

	SAVE_IFS=$IFS
	IFS=","
	for OPT in $FUSE_OPTIONS; do
	case $OPT in
		auto) ;;
		noauto) ;;
		user) ;;
		nouser) ;;
		users) ;;
		_netdev) ;;
		#nonempty) ;;
		usage-limit=*) OPTIONS="$OPTIONS --${OPT}" ;;
		uid=*)
			if [ "x$NORMALIZE_FUSE_OPTIONS" == "x" ]; then
				NORMALIZE_FUSE_OPTIONS="allow_other,$OPT"
			else
				NORMALIZE_FUSE_OPTIONS="$NORMALIZE_FUSE_OPTIONS,allow_other,$OPT"
			fi
		;;

		*)
			if [ "x$NORMALIZE_FUSE_OPTIONS" == "x" ]; then
				NORMALIZE_FUSE_OPTIONS="$OPT"
			else
				NORMALIZE_FUSE_OPTIONS="$NORMALIZE_FUSE_OPTIONS,$OPT"
			fi
		;;
	esac
	done
	IFS=$SAVE_IFS
	OPTIONS="$OPTIONS -o $NORMALIZE_FUSE_OPTIONS"
fi

if [ "x$USAGE_LIMIT" != "x" ]; then
	OPTIONS="$OPTIONS --usage-limit=$USAGE_LIMIT"
fi

echo "$acfs $OPTIONS $MOUNTPOINT"
exec $acfs $OPTIONS $MOUNTPOINT
